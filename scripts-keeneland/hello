#!/bin/bash
#  Sample Batch Script for a Serial job
#
#  Submit this script using the command: qsub <script_name>
#
#  Use the "qstat" command to check the status of a job.
#
# The following are embedded QSUB options. The syntax is #PBS (the # does
# _not_  denote that the lines are commented out so do not remove).
#
# select bash as shell
#PBS -S /bin/bash
#
# walltime : maximum wall clock time (hh:mm:ss)
#PBS -l walltime=00:01:00
#
# nodes: number of 16-core nodes
#   ppn: how many cores per node to use (1 through 16)
#       (you are always charged for the entire node)
#PBS -l nodes=1:ppn=1
#
# job name (default = name of script file)
#PBS -N hello
#
#join stdin/stderr
#PBS -j oe
#
# filename for standard output (default = <job_name>.o<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
#PBS -o $HOME/logs/
#
# filename for standard error (default = <job_name>.e<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
##PBS -e testjob.err
#
# 
# select queue: options are batch qstat -q
#PBS -q batch

# End of embedded QSUB options
#

#echo commands before execution; use for debugging
set -x           


# Go to the job scratch directory. Use cdjob <jobid> to go to this
# directory once the job has started.

BINHOME=$HOME/xsede-demos/build

date 

qstat -f $PBS_JOBID

cd $BINHOME
./hello

date

