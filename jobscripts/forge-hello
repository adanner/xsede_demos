#!/bin/bash
#  Sample Batch Script for a Serial job
#
#  Submit this script using the command: qsub <script_name>
#
#  Use the "qstat" command to check the status of a job.
#
# The following are embedded QSUB options. The syntax is #PBS (the # does
# _not_  denote that the lines are commented out so do not remove).
#
# select bash as shell
#PBS -S /bin/bash
#
# export all my environment variables to the job
#PBS -V
#
# walltime : maximum wall clock time (hh:mm:ss)
#PBS -l walltime=00:02:00
#
# nodes: number of 16-core nodes
#   ppn: how many cores per node to use (1 through 16)
#       (you are always charged for the entire node)
#PBS -l nodes=1:ppn=1
#
# job name (default = name of script file)
#PBS -N hello
#
#join stdin/stderr
#PBS -j oe
#
# filename for standard output (default = <job_name>.o<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
#PBS -o $HOME/logs/
#
# filename for standard error (default = <job_name>.e<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
##PBS -e testjob.err
#
# 
# select queue: options are debug/normal qstat -q
# debug: 4 nodes max, 30 minutes
# normal: 18 nodes max, 12 hours
#PBS -q normal

# End of embedded QSUB options
#

#echo commands before execution; use for debugging
set -x           


# Go to the job scratch directory. Use cdjob <jobid> to go to this
# directory once the job has started.

cd $SCR

BINHOME=$HOME/tg-demos/build

# Copy executable to the job scratch directory ($SCR)
# (Use msscmd to get your files if they are in NCSA MSS)
cp $BINHOME/hello .
./hello
